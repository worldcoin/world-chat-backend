name: CI

on:
  - pull_request

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  format:
    name: Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt

      - name: Check formatting
        run: cargo fmt --all -- --check

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Run Clippy
        run: cargo clippy --all-targets --all-features --

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Build
        run: cargo build --verbose

      - name: Build release
        run: cargo build --release --verbose

  test:
    name: Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Start LocalStack and wait for it to be healthy
        run: |
          docker compose up -d --wait localstack

      - name: Run tests
        run: cargo test -- --nocapture

      - name: Clean up
        run: docker compose down

  proto-check:
    name: Proto Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install buf
        uses: bufbuild/buf-setup-action@v1

      - name: Check breaking changes
        working-directory: ./notification-worker
        run: buf breaking --against buf.build/xmtp/proto:main

  deny:
    name: Cargo deny
    runs-on: ubuntu-latest
    permissions:
      contents: read
    strategy:
      matrix:
        checks:
          - advisories
          - bans licenses sources

    continue-on-error: ${{ matrix.checks == 'advisories' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: EmbarkStudios/cargo-deny-action@v2
        with:
          command: check ${{ matrix.checks }}
          rust-version: stable

  build-docker:
    name: Build and Test Docker
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - name: backend
            port: 8000
            health_endpoint: /health
          - name: notification-worker
            port: 8001
            health_endpoint: /health
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build ${{ matrix.service.name }} Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ matrix.service.name }}/Dockerfile
          push: false
          load: true
          tags: ${{ matrix.service.name }}:latest
          build-args: GIT_REV=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Start LocalStack and XMTP Node and wait for it to be healthy
        run: |
          docker compose up -d --wait localstack xmtp-node

      - name: Run ${{ matrix.service.name }} container
        run: |
          # Use the explicit network defined in docker-compose.yml
          docker run -d \
            --name ${{ matrix.service.name }}-test \
            --network world-chat-network \
            -p ${{ matrix.service.port }}:${{ matrix.service.port }} \
            --env-file ${{ matrix.service.name }}/.env.example \
            --env XMTP_ENDPOINT_URL=http://xmtp-node:5556 \ # Override the XMTP endpoint URL for the test container
            --env AWS_ENDPOINT_URL=http://localstack:4566 \ # Override the AWS endpoint URL for the test container
            ${{ matrix.service.name }}:latest

          # Wait for the application to start
          sleep 5

          # Output logs for debugging
          docker logs ${{ matrix.service.name }}-test

      - name: Health check Docker container
        run: curl -f http://0.0.0.0:${{ matrix.service.port }}${{ matrix.service.health_endpoint }}

      - name: Clean up
        run: |
          docker stop ${{ matrix.service.name }}-test || true
          docker rm ${{ matrix.service.name }}-test || true
          docker compose down
